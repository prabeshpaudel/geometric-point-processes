library(tidyverse)
library(tidyverse)
library(dplyr)
library(ggplot2)
data.df <- read.csv("LinearClassData4.csv") # load data
data.df <- data.df %>%
filter(class != 2) %>%
dplyr::select(x1,x2,class) # filter out class 2, so only two class left
data.gg <- data.df %>%
ggplot()+
geom_point(aes(x1,x2,color=factor(class)))+
labs(title="Two Classes",color="Class")
data.gg # visualize the data (two classes)
mod.lda <- lda(class ~ x1 + x2,data=data.df) # lda
scale.lda <- mod.lda$scaling # scaling vector
original_scale.lda = scale.lda # store the original scaling vector
scale.lda <- scale.lda/sqrt(sum(scale.lda^2)) # scaling vector turned into unit vector
data.mat <- data.matrix(data.df[c("x1","x2")]) # matrix of x1, x2
proj.vals <- data.mat %*% scale.lda # matrix multiplication (n x 1 matrix)
data.df$proj <- as.numeric(proj.vals) # turn projections into column
lda.gg = data.df %>%
ggplot()+
## Plot the points
geom_point(aes(x1,x2,color=factor(class)))+
## Plot the projections
geom_point(data=data.df,aes(x=scale.lda[1]*proj,
y=scale.lda[2]*proj,color=factor(class)),size=2)+
## the projection lines,
geom_segment(aes(x=scale.lda[1]*proj,xend=x1,
y=scale.lda[2]*proj,yend=x2,color=factor(class)),size=0.5,alpha=0.5)+
## the vector representing lda.scale
geom_segment(aes(x=0,xend=scale.lda[1],
y=0,yend=scale.lda[2]),color="black",size=1.5,
arrow = arrow(length = unit(0.03, "npc")))+
## titles
labs(title="Two Classes",
subtitle="LDA Projection onto One Dimension",color="Class")+coord_fixed()
lda.gg
# Calculate between groups scatter
data0 = data.df %>%
filter(class == 0) # filter out all the class 0
u1 = mean(data0$proj) # mean of the projection for class 0
data1 = data.df %>%
filter(class == 1) # filter out all the class 1
u2 = mean(data1$proj) # mean of the projection for class 1
(sb = (u1-u2)^2) # calculate between groups scatter
data0$sk = (data0$proj - u1)^2 # calculate (proj-uk)^2 for class 0
data1$sk = (data1$proj - u2)^2 # calculate (proj-uk)^2 for class 1
sw = sum(data0$sk) + sum(data1$sk) # calculate within groups scatter
(J = sb/sw) # calculate score of projection
library(ggtext)
scale.lda.inverse = as.matrix(c(-scale.lda[2],scale.lda[1])) # perpendicular sclae.lda
proj.vals2 <- data.mat %*% scale.lda.inverse # matrix multiplication (n x 1 matrix)
data.df$proj <- as.numeric(proj.vals2) # turn projections into column
lda.inverse.gg = data.df %>%
ggplot()+
##Plot the points
geom_point(aes(x1,x2,color=factor(class)))+
## Plot the projections
geom_point(data=data.df,aes(x=scale.lda.inverse[1]*proj,
y=scale.lda.inverse[2]*proj,color=factor(class)),size=2)+
##the projection lines,
geom_segment(aes(x=scale.lda.inverse[1]*proj,xend=x1,
y=scale.lda.inverse[2]*proj,yend=x2,color=factor(class)),size=0.5,alpha=0.5)+
##the vector representing lda.scale
geom_segment(aes(x=0,xend=scale.lda.inverse[1],
y=0,yend=scale.lda.inverse[2]),color="black",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## Use these colors
#scale_color_manual(values=cols)+
labs(title="Two Classes",
subtitle="LDA Projection onto One Dimension",color="Class")+coord_fixed()
lda.inverse.gg
grid.arrange(lda.gg,lda.inverse.gg,nrow=1) # graph both scale.lda and perpendicular
data0 = data.df %>%
filter(class == 0) # filter out all the class 0
u1 = mean(data0$proj) # mean of the projection for class 0
data1 = data.df %>%
filter(class == 1) # filter out all the class 1
u2 = mean(data1$proj) # mean of the projection for class 1
sb = (u1-u2)^2 # calculate between groups scatter
data0$sk = (data0$proj - u1)^2 # calculate (proj-uk)^2 for class 0
data1$sk = (data1$proj - u2)^2 # calculate (proj-uk)^2 for class 1
sw = sum(data0$sk) + sum(data1$sk) # calculate within groups scatter
(J = sb/sw) # calculate score of projection
# Function to calculate J
scoreProj = function(angle){
scale.lda = as.matrix(c(cos(angle),sin(angle)))
proj.vals <- data.mat %*% scale.lda # matrix multiplication (n x 1 matrix)
data.df$proj <- as.numeric(proj.vals) # turn projections into column
data0 = data.df %>%
filter(class == 0) # filter out all the class 0
u1 = mean(data0$proj) # mean of the projection for class 1
data1 = data.df %>%
filter(class == 1) # filter out all the class 1
u2 = mean(data1$proj) # mean of the projection for class 1
sb = (u1-u2)^2 # calculate between groups scatter
data0$sk = (data0$proj - u1)^2 # calculate (proj-uk)^2 for class 0
data1$sk = (data1$proj - u2)^2 # calculate (proj-uk)^2 for class 1
sw = sum(data0$sk) + sum(data1$sk) # calculate score of projection
return (sb/sw)
}
theta = seq(0, 3.14, length.out = 360) # 360 degree in radians
score <- map_dbl(theta,function(val) scoreProj(val)) # map the score
library(purrr)
theta = seq(0, 3.14, length.out = 360) # 360 degree in radians
score <- map_dbl(theta,function(val) scoreProj(val)) # map the score
data.frame(theta,score) %>%
ggplot()+
geom_line(aes(x=theta,y=score)) # plot score based on theta
# max score projection
(max_score = max(score)) # This is what we got with the original scaling vector!
max_theta = theta[which.max(score)] # theta for the max score projection
max_scale.lda = as.matrix(c(cos(max_theta),sin(max_theta))) # scaling vector for max score projection
# min score projection
(min_score = min(score))
min_theta = theta[which.min(score)] # theta for the min score projection
min_scale.lda = as.matrix(c(cos(min_theta),sin(min_theta))) # scaling vector for min score projection
lda.gg+
## the vector representing max_scale.lda
geom_segment(aes(x=0,xend=max_scale.lda[1],
y=0,yend=max_scale.lda[2]),color="blue",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## the vector representing min_scale.scale
geom_segment(aes(x=0,xend=min_scale.lda[1],
y=0,yend=min_scale.lda[2]),color="red",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
labs(title = "LDA Projection onto One Dimension",
subtitle = "Scaling vectors: Black (original), blue (max scoreProj), red (min scoreProj)")+
theme(plot.title.position = "plot",legend.position = "none")
scales::show_col(scales::hue_pal()(2))
lda.gg+
## the vector representing max_scale.lda
geom_segment(aes(x=0,xend=max_scale.lda[1],
y=0,yend=max_scale.lda[2]),color="blue",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## the vector representing min_scale.scale
geom_segment(aes(x=0,xend=min_scale.lda[1],
y=0,yend=min_scale.lda[2]),color="red",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
labs(title = "LDA Projection onto One Dimension for
<span style='color:#F8766D;'>Class 0</span>, and
<span style='color:#00BGC4;'>Class 1</span>",
subtitle = "Scaling vectors: Black (original), blue (max scoreProj), red (min scoreProj)")+
theme(plot.title.position = "plot",legend.position = "none")
# max score projection
(max_score = max(score)) # This is what we got with the original scaling vector!
max_theta = theta[which.max(score)] # theta for the max score projection
max_scale.lda = as.matrix(c(cos(max_theta),sin(max_theta))) # scaling vector for max score projection
# min score projection
(min_score = min(score))
min_theta = theta[which.min(score)] # theta for the min score projection
min_scale.lda = as.matrix(c(cos(min_theta),sin(min_theta))) # scaling vector for min score projection
lda.gg+
## the vector representing max_scale.lda
geom_segment(aes(x=0,xend=max_scale.lda[1],
y=0,yend=max_scale.lda[2]),color="blue",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## the vector representing min_scale.scale
geom_segment(aes(x=0,xend=min_scale.lda[1],
y=0,yend=min_scale.lda[2]),color="red",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
labs(title = "LDA Projection onto One Dimension for
<span style='color:#F8766D;'>Class 0</span>, and
<span style='color:#00BGC4;'>Class 1</span>",
subtitle = "Scaling vectors: Black (original), blue (max scoreProj), red (min scoreProj)")+
theme(plot.title.position = "plot",legend.position = "none")
# max score projection
(max_score = max(score)) # This is what we got with the original scaling vector!
max_theta = theta[which.max(score)] # theta for the max score projection
max_scale.lda = as.matrix(c(cos(max_theta),sin(max_theta))) # scaling vector for max score projection
# min score projection
(min_score = min(score))
min_theta = theta[which.min(score)] # theta for the min score projection
min_scale.lda = as.matrix(c(cos(min_theta),sin(min_theta))) # scaling vector for min score projection
lda.gg+
## the vector representing max_scale.lda
geom_segment(aes(x=0,xend=max_scale.lda[1],
y=0,yend=max_scale.lda[2]),color="blue",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## the vector representing min_scale.scale
geom_segment(aes(x=0,xend=min_scale.lda[1],
y=0,yend=min_scale.lda[2]),color="red",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
labs(title = "**Fisher's *Iris* dataset**
<span style='font-size:11pt'>Sepal width vs. sepal length for
<span style='color:#0072B2;'>setosa</span>,
<span style='color:#D55E00;'>versicolor</span>, and
<span style='color:#009E73;'>virginica</span>
</span>",
subtitle = "Scaling vectors: Black (original), blue (max scoreProj), red (min scoreProj)")+
theme(plot.title.position = "plot",legend.position = "none")
# max score projection
(max_score = max(score)) # This is what we got with the original scaling vector!
max_theta = theta[which.max(score)] # theta for the max score projection
max_scale.lda = as.matrix(c(cos(max_theta),sin(max_theta))) # scaling vector for max score projection
# min score projection
(min_score = min(score))
min_theta = theta[which.min(score)] # theta for the min score projection
min_scale.lda = as.matrix(c(cos(min_theta),sin(min_theta))) # scaling vector for min score projection
lda.gg+
## the vector representing max_scale.lda
geom_segment(aes(x=0,xend=max_scale.lda[1],
y=0,yend=max_scale.lda[2]),color="blue",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## the vector representing min_scale.scale
geom_segment(aes(x=0,xend=min_scale.lda[1],
y=0,yend=min_scale.lda[2]),color="red",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
labs(title = "**Fisher's *Iris* dataset**
<span style='font-size:11pt'>Sepal width vs. sepal length for
<span style='color:#0072B2;'>setosa</span>,
<span style='color:#D55E00;'>versicolor</span>, and
<span style='color:#009E73;'>virginica</span>
</span>",
subtitle = "Scaling vectors: Black (original), blue (max scoreProj), red (min scoreProj)")+
theme(plot.title.position = "plot",legend.position = "none")
# max score projection
(max_score = max(score)) # This is what we got with the original scaling vector!
max_theta = theta[which.max(score)] # theta for the max score projection
max_scale.lda = as.matrix(c(cos(max_theta),sin(max_theta))) # scaling vector for max score projection
# min score projection
(min_score = min(score))
min_theta = theta[which.min(score)] # theta for the min score projection
min_scale.lda = as.matrix(c(cos(min_theta),sin(min_theta))) # scaling vector for min score projection
lda.gg+
## the vector representing max_scale.lda
geom_segment(aes(x=0,xend=max_scale.lda[1],
y=0,yend=max_scale.lda[2]),color="blue",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## the vector representing min_scale.scale
geom_segment(aes(x=0,xend=min_scale.lda[1],
y=0,yend=min_scale.lda[2]),color="red",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
labs(title = "**Fisher's *Iris* dataset**
<span style='font-size:11pt'>Sepal width vs. sepal length for
<span style='color:#0072B2;'>setosa</span>,
<span style='color:#D55E00;'>versicolor</span>, and
<span style='color:#009E73;'>virginica</span>
</span>",
subtitle = "Scaling vectors: Black (original), blue (max scoreProj), red (min scoreProj)")+
theme(plot.title.position = "plot",legend.position = "none")
# max score projection
(max_score = max(score)) # This is what we got with the original scaling vector!
max_theta = theta[which.max(score)] # theta for the max score projection
max_scale.lda = as.matrix(c(cos(max_theta),sin(max_theta))) # scaling vector for max score projection
# min score projection
(min_score = min(score))
min_theta = theta[which.min(score)] # theta for the min score projection
min_scale.lda = as.matrix(c(cos(min_theta),sin(min_theta))) # scaling vector for min score projection
lda.gg+
## the vector representing max_scale.lda
geom_segment(aes(x=0,xend=max_scale.lda[1],
y=0,yend=max_scale.lda[2]),color="blue",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## the vector representing min_scale.scale
geom_segment(aes(x=0,xend=min_scale.lda[1],
y=0,yend=min_scale.lda[2]),color="red",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
labs(title = "LDA Projection onto One Dimension",
subtitle = "Scaling vectors: Black (original), blue (max scoreProj), red (min scoreProj)")+
theme(plot.title.position = "plot",legend.position = "none")
lda.gg+
## the vector representing max_scale.lda
geom_segment(aes(x=0,xend=max_scale.lda[1],
y=0,yend=max_scale.lda[2]),color="blue",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## the vector representing min_scale.scale
geom_segment(aes(x=0,xend=min_scale.lda[1],
y=0,yend=min_scale.lda[2]),color="red",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
labs(title = "LDA Projection onto One Dimension for Two Classes
<span style='color:#0072B2;'>setosa</span>",
subtitle = "Scaling vectors: Black (original), blue (max scoreProj), red (min scoreProj)")+
theme(plot.title.position = "plot",legend.position = "none")
lda.gg+
## the vector representing max_scale.lda
geom_segment(aes(x=0,xend=max_scale.lda[1],
y=0,yend=max_scale.lda[2]),color="blue",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
## the vector representing min_scale.scale
geom_segment(aes(x=0,xend=min_scale.lda[1],
y=0,yend=min_scale.lda[2]),color="red",
size=1.5,arrow = arrow(length = unit(0.03, "npc")))+
labs(title = "LDA Projection onto One Dimension for Two Classes",
subtitle = "Scaling vectors: Black (original), blue (max scoreProj), red (min scoreProj)")+
theme(plot.title.position = "plot",legend.position = "none")
lda.gg = data.df %>%
ggplot()+
## Plot the points
geom_point(aes(x1,x2,color=factor(class)))+
## Plot the projections
geom_point(data=data.df,aes(x=scale.lda[1]*proj,
y=scale.lda[2]*proj,color=factor(class)),size=2)+
## the projection lines,
geom_segment(aes(x=scale.lda[1]*proj,xend=x1,
y=scale.lda[2]*proj,yend=x2,color=factor(class)),size=0.5,alpha=0.5)+
## the vector representing lda.scale
geom_segment(aes(x=0,xend=scale.lda[1],
y=0,yend=scale.lda[2]),color="black",size=1.5,
arrow = arrow(length = unit(0.03, "npc")))+
## titles
labs(title="Two Classes",
subtitle="LDA Projection onto One Dimension",color="Class")+coord_fixed()
lda.gg
mod.lda <- lda(class ~ x1 + x2,data=data.df) # lda
scale.lda <- mod.lda$scaling # scaling vector
original_scale.lda = scale.lda # store the original scaling vector
scale.lda <- scale.lda/sqrt(sum(scale.lda^2)) # scaling vector turned into unit vector
data.mat <- data.matrix(data.df[c("x1","x2")]) # matrix of x1, x2
proj.vals <- data.mat %*% scale.lda # matrix multiplication (n x 1 matrix)
data.df$proj <- as.numeric(proj.vals) # turn projections into column
lda.gg = data.df %>%
ggplot()+
## Plot the points
geom_point(aes(x1,x2,color=factor(class)))+
## Plot the projections
geom_point(data=data.df,aes(x=scale.lda[1]*proj,
y=scale.lda[2]*proj,color=factor(class)),size=2)+
## the projection lines,
geom_segment(aes(x=scale.lda[1]*proj,xend=x1,
y=scale.lda[2]*proj,yend=x2,color=factor(class)),size=0.5,alpha=0.5)+
## the vector representing lda.scale
geom_segment(aes(x=0,xend=scale.lda[1],
y=0,yend=scale.lda[2]),color="black",size=1.5,
arrow = arrow(length = unit(0.03, "npc")))+
## titles
labs(title="Two Classes",
subtitle="LDA Projection onto One Dimension",color="Class")+coord_fixed()
lda.gg
ggplotly(
df %>%
ggplot() +
geom_point(aes(x=x, y=y, color=group1, group=group1, shape=group2)) +
geom_line(aes(x=x, y=y, color=group1, group=group1))
)
edgec_critical = read.csv("results_all.csv")
getwd()
setwd("~/HiPerCiC/ripser/geometric-point-processes")
edgec_critical = read.csv("results_all.csv")
View(edgec_critical)
edgec_critical = read.csv("results_all.csv")
View(edgec_critical)
edgec_critical = read.csv("results_all.csv")
View(edgec_critical)
edgec_critical = read.csv("results_all.csv")
View(edgec_critical)
edge_critical = read.csv("results_all.csv")
edge_critical$index = 1:100
edge_critical$index = 1:89
View(edgec_critical)
edge_critical = read.csv("results_all.csv")
edge_critical$index = 1:89
edge_critical = read.csv("results_all.csv")
edge_critical$index = 1:89
View(edge_critical)
edge_critical_gather = edge_critical %>%
gather(num,value,c(1:10))
library(tidyverse)
edge_critical_gather = edge_critical %>%
gather(num,value,c(1:10))
View(edge_critical_gather)
edge_critical %>%
ggplot()+
geom_point(aes(x=index,y=value,color=num))
edge_critical_gather %>%
ggplot()+
geom_point(aes(x=index,y=value,color=num))
library(tidyverse)
edge_critical = read.csv("results_all.csv")
edge_critical$index = 1:89
edge_critical_gather = edge_critical %>%
gather(N,value,c(1:10))
edge_critical_gather %>%
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labx(x = "Number of Critical Points",y = "Distribution")
edge_critical_gather %>%
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
lab(x = "Number of Critical Points",y = "Distribution")
edge_critical_gather %>%
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labs(x = "Number of Critical Points",y = "Distribution")
library(tidyverse)
edge_critical = read.csv("results_all.csv")
View(edge_critical)
edge_critical$index = 1:99
edge_critical_gather = edge_critical %>%
gather(N,value,c(1:10))
edge_critical_gather %>%  # graph
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
View(edge_critical)
edge_critical_mutate = edge_critical %>%
mutate(X10 = X10 / sqrt(10),
X20 = X20 / sqrt(20),
X100 = X100 / sqrt(100))
edge_critical_mutate_gather = edge_critical_mutate %>% # gather
gather(N,value,c(1:10))
edge_critical_mutate_gather %>%  # graph
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
edge_critical_mutate = edge_critical %>%
mutate(X10 = X10 / sqrt(10),
X20 = X20 / sqrt(20),
X20 = X20 / sqrt(20),
X20 = X20 / sqrt(20),
X20 = X20 / sqrt(20),
X100 = X100 / sqrt(100))
X20 = X20 / sqrt(20),edge_critical_mutate_gather = edge_critical_mutate %>% # gather
gather(N,value,c(1:10))
edge_critical_mutate = edge_critical %>%
mutate(X10 = X10 / sqrt(10),
X20 = X20 / sqrt(20),
X30 = X30 / sqrt(30),
X40 = X40 / sqrt(40),
X50 = X50 / sqrt(50),
X60 = X60 / sqrt(60),
X70 = X70 / sqrt(70),
X80 = X80 / sqrt(80),
X90 = X90 / sqrt(90),
X100 = X100 / sqrt(100))
edge_critical_mutate_gather = edge_critical_mutate %>% # gather
gather(N,value,c(1:10))
edge_critical_mutate_gather %>%  # graph
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
edge_critical_mutate = edge_critical %>%
mutate(X10 = X10 * 10)
edge_critical_mutate_gather = edge_critical_mutate %>% # gather
gather(N,value,c(1:10))
edge_critical_mutate_gather %>%  # graph
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
edge_critical_mutate = edge_critical %>%
mutate(X10 = X10 * 10,
index10 = index*10)
library(tidyverse)
edge_critical = read.csv("results_all.csv") # read date
edge_critical$index = 1:99 # set x value
edge_critical_gather = edge_critical %>% # gather
gather(N,value,c(1:10))
edge_critical_gather %>%  # graph
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
edge_critical_mutate = edge_critical %>%
mutate(X10 = X10 / sqrt(10),
X20 = X20 / sqrt(20),
X30 = X30 / sqrt(30),
X40 = X40 / sqrt(40),
X50 = X50 / sqrt(50),
X60 = X60 / sqrt(60),
X70 = X70 / sqrt(70),
X80 = X80 / sqrt(80),
X90 = X90 / sqrt(90),
X100 = X100 / sqrt(100))
edge_critical_mutate_gather = edge_critical_mutate %>% # gather
gather(N,value,c(1:10))
edge_critical_mutate_gather %>%  # graph
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
edge_critical_mutate = edge_critical %>%
mutate(X10 = X10 * 10,
index10 = index*10)
View(edge_critical_mutate)
edge_critical_mutate_gather = edge_critical_mutate %>% # gather
gather(N,value,c(1:10))
edge_critical_mutate_gather = edge_critical_mutate %>% # gather
gather(N,value,c(2:10))
edge_critical_mutate_gather %>%  # graph
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
edge_critical_mutate_gather %>%  # graph
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
geom_point(aes(x=index10,y=X10))+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
edge_critical_gather %>%  # graph
ggplot()+
geom_point(aes(x=index,y=value,color=N))+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
edge_critical_gather %>%  # graph
ggplot(aes(x=index,y=value,color=N))+
geom_point()+
geom_line()+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
edge_critical_gather %>%  # graph
ggplot(aes(x=index,y=value,color=N))+
geom_point()+
labs(x = "Number of Critical Bi-grades",y = "Distribution")
model <- lm(X100 ~ index + I(index^2) + I(index^3))
model <- edge_critical %>%
lm(X100 ~ index + I(index^2) + I(index^3))
model <- lm(edge_critical$X100 ~ edge_critical$index +
I(edge_critical$index^2) + I(edge_critical$index^3))
View(model)
summary(model)
model2 <- lm(edge_critical$X90 ~ edge_critical$index +
I(edge_critical$index^2) + I(edge_critical$index^3))
summary(model2)
predict(model1,1:89)
predict(model,1:89)
predict(model,c(1:89))
